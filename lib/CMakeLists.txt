include(ExternalProject)

find_program(MESON meson REQUIRED)
find_program(NINJA ninja REQUIRED)

# Read external project versions
file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/VERSIONS VERSIONS_LIST)
foreach(ITEM ${VERSIONS_LIST})
    string(REPLACE "=" ";" ARGS ${ITEM})
    list(GET ARGS 0 LIB)
    list(GET ARGS 1 VERSION)
    set(${LIB} ${VERSION})
endforeach()

set(VIPS_VERSION ${VIPS_VERSION} PARENT_SCOPE)
string(REPLACE "." "_" EXIF_VERSION_TAG ${EXIF_VERSION})

# Set the host target
if (NOT DEFINED BUILD_TARGET)
  set(CONFIGURE_HOST "--host=x86_64-pc-linux")
elseif(${BUILD_TARGET} STREQUAL "w64")
  set(CONFIGURE_HOST "--host=x86_64-w64-mingw32")
endif()

if (NOT DEFINED CMAKE_BUILD_TYPE)
  set(CONFIGURE_CFLAGS "${CMAKE_C_FLAGS}")
  set(CONFIGURE_CXXFLAGS "${CMAKE_CXX_FLAGS}")
elseif (${CMAKE_BUILD_TYPE} STREQUAL "Release")
  set(CONFIGURE_CFLAGS ${CMAKE_C_FLAGS_RELEASE})
  set(CONFIGURE_CXXFLAGS ${CMAKE_CXX_FLAGS_RELEASE})
elseif (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
  set(CONFIGURE_CFLAGS ${CMAKE_C_FLAGS_DEBUG})
  set(CONFIGURE_CXXFLAGS ${CMAKE_CXX_FLAGS_DEBUG})
endif()

# Workaround to set more than one compiler flags
string(REPLACE " " "\ " CONFIGURE_CFLAGS "${CONFIGURE_CFLAGS}")
string(REPLACE " " "\ " CONFIGURE_CXXFLAGS "${CONFIGURE_CXXFLAGS}")

list(APPEND CONFIGURE_VARS
  PKG_CONFIG_PATH=${EXT_INSTALL_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH
  CFLAGS=${CONFIGURE_CFLAGS}
  CXXFLAGS=${CONFIGURE_CXXFLAGS}
  LDFLAGS=-L${EXT_INSTALL_DIR}/lib,-Wl,-rpath=${EXT_INSTALL_DIR}/lib
  CPPFLAGS=-I${EXT_INSTALL_DIR}/include
  --prefix=${EXT_INSTALL_DIR}
  ${CONFIGURE_HOST}
  )

list(APPEND MESON_VARS
  --bindir=${EXT_INSTALL_DIR}/bin
  --libdir=${EXT_INSTALL_DIR}/lib
  --includedir=${EXT_INSTALL_DIR}/include
  --datadir=${EXT_INSTALL_DIR}/share
  --prefix=${EXT_INSTALL_DIR}
  )

if (NOT DEFINED BUILD_TARGET)
  set(MESON_CROSS_FILE "")
elseif(${BUILD_TARGET} STREQUAL "w64")
  set(MESON_CROSS_FILE --cross-file ${PROJECT_SOURCE_DIR}/meson/x86_64-w64-mingw32-crossfile.txt)
endif()

find_library(LIBIMAGEQUANT imagequant PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if (NOT LIBIMAGEQUANT)
    # https://github.com/ImageOptim/libimagequant/issues/36
    if (CMAKE_COMPILER_IS_GNUCC AND CMAKE_C_COMPILER_VERSION VERSION_GREATER 7.0 AND ${BUILD_TARGET} STREQUAL "linux")
        set(LIQ_OPENMP "--with-openmp")
    else()
        set(LIQ_OPENMP "--without-openmp")
    endif()
    ExternalProject_Add(libimagequant
      URL "https://github.com/ImageOptim/libimagequant/archive/${LIQ_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libimagequant"
      CONFIGURE_COMMAND ./configure CC=${CMAKE_C_COMPILER} CFLAGS=${CONFIGURE_CFLAGS}
      --prefix=${EXT_INSTALL_DIR}
      --with-sse
      ${LIQ_OPENMP}
      BUILD_IN_SOURCE 1
      )

    if (${BUILD_TARGET} STREQUAL "w64")
      ExternalProject_Add_Step(libimagequant rename-dll
      COMMAND mv libimagequant.so libimagequant.dll
      WORKING_DIRECTORY ${EXT_INSTALL_DIR}/lib/
      DEPENDEES install
      )
      ExternalProject_Add_StepTargets(libimagequant rename-dll) 
    endif()
else()
    add_custom_target(libimagequant "")
endif()

find_library(FREETYPE freetype PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT FREETYPE)
    ExternalProject_Add(freetype
      URL "http://download.savannah.nongnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/freetype"
      CMAKE_ARGS
      -DCMAKE_INSTALL_PREFIX=${EXT_INSTALL_DIR}
      -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      -DCMAKE_BUILD_TYPE=Release
      -DBUILD_SHARED_LIBS=1
      -DENABLE_CCACHE=0
      )
else()
    add_custom_target(freetype "")
endif()

find_library(HARFBUZZ harfbuzz PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT HARFBUZZ)
    ExternalProject_Add(harfbuzz
      URL "https://github.com/harfbuzz/harfbuzz/releases/download/${HARFBUZZ_VERSION}/harfbuzz-${HARFBUZZ_VERSION}.tar.xz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/harfbuzz"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/harfbuzz/src/harfbuzz/configure
      ${CONFIGURE_VARS}
      --enable-shared=yes
      --enable-static=no
      --disable-gtk-doc
      --disable-gtk-doc-html
      --disable-gtk-doc-pdf
      --with-icu=no
      --enable-introspection=no
      --with-freetype=yes
      DEPENDS freetype
      )
else()
    add_custom_target(harfbuzz "")
endif()

find_library(FRIBIDI fribidi PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT FRIBIDI)
    ExternalProject_Add(fribidi
      URL "https://github.com/fribidi/fribidi/releases/download/v${FRIBIDI_VERSION}/fribidi-${FRIBIDI_VERSION}.tar.xz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/fribidi"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/fribidi/src/fribidi/configure
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-docs
      )
else()
    add_custom_target(fribidi "")
endif()

find_library(PIXMAN pixman-1 PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT PIXMAN)
    ExternalProject_Add(pixman
      URL "http://www.cairographics.org/releases/pixman-${PIXMAN_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/pixman"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/pixman/src/pixman/configure
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-docs
      --disable-gtk
      )
else()
    add_custom_target(pixman "")
endif()

find_library(LIBEXIF exif PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT LIBEXIF)
    ExternalProject_Add(libexif
      URL "https://github.com/libexif/libexif/releases/download/libexif-${EXIF_VERSION_TAG}-release/libexif-${EXIF_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libexif"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/libexif/src/libexif/configure
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-docs
      )
else()
    add_custom_target(libexif "")
endif()

find_library(LIBJPEG jpeg turbojpeg PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT LIBJPEG)
    ExternalProject_Add(libjpeg
      URL "https://sourceforge.net/projects/libjpeg-turbo/files/${JPG_VERSION}/libjpeg-turbo-${JPG_VERSION}.tar.gz/download"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libjpeg-turbo"
      CMAKE_ARGS
      -DCMAKE_INSTALL_PREFIX=${EXT_INSTALL_DIR}
      -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      -DWITH_TURBOJPEG=ON
      -DENABLE_SHARED=ON
      -DENABLE_STATIC=OFF
      -DWITH_JPEG8=ON
      -DWITH_SIMD=ON
      BUILD_IN_SOURCE 1
      )
else()
    add_custom_target(libjpeg "")
endif()

find_library(TIFF tiff EXACT PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT TIFF)
   ExternalProject_Add(tiff
     URL "http://download.osgeo.org/libtiff/tiff-${TIFF_VERSION}.tar.gz"
     PREFIX "${CMAKE_CURRENT_BINARY_DIR}/tiff"
     CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/tiff/src/tiff/configure
     ${CONFIGURE_VARS}
     --enable-shared
     --disable-static
     --without-x
     --disable-cxx
     --disable-lzma
     DEPENDS libjpeg
     )
else()
   add_custom_target(tiff "")
endif()

if (WITH_LIBSPNG)
    list(APPEND LIBSPNG_FLAGS
    --with-libspng
    SPNG_LIBS="-L${EXT_INSTALL_DIR}/lib -lspng"
    SPNG_CFLAGS=-I${EXT_INSTALL_DIR}/include)
    find_library(LIBSPNG spng PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
    if(NOT LIBSPNG)
        ExternalProject_Add(libspng
          URL "https://github.com/randy408/libspng/archive/v${SPNG_VERSION}.tar.gz"
          PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libspng"
          PATCH_COMMAND patch -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/patches/libspng-0.6-fixes.patch
          CMAKE_ARGS
          -DCMAKE_INSTALL_PREFIX=${EXT_INSTALL_DIR}
          -DCMAKE_BUILD_TYPE=Release
          -DSPNG_STATIC=OFF
          -DENABLE_OPT=ON
          BUILD_IN_SOURCE 1
          )
    else()
        add_custom_target(libspng "")
    endif()
else()
    list(APPEND LIBSPNG_FLAGS
    --without-libspng)
    add_custom_target(libspng "")
endif()

find_library(LIBPNG png PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT LIBPNG)
    ExternalProject_Add(libpng
      URL "https://downloads.sourceforge.net/project/libpng/libpng16/${PNG_VERSION}/libpng-${PNG_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libpng"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/libpng/src/libpng/configure
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-dependency-tracking
      --disable-silent-rules
      )
else()
    add_custom_target(libpng "")
endif()

find_library(FONTCONFIG fontconfig PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT FONTCONFIG)
    ExternalProject_Add(fontconfig
      URL "https://github.com/freedesktop/fontconfig/archive/refs/tags/${FONTCONFIG_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/fontconfig"
      CONFIGURE_COMMAND ./autogen.sh
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-docs
      --disable-nls
      DEPENDS freetype
      BUILD_IN_SOURCE 1
      )
else()
    add_custom_target(fontconfig "")
endif()

find_library(CAIRO cairo PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT CAIRO)
    if (NOT DEFINED BUILD_TARGET)
      set(CAIRO_XLIB_FLAG "--enable-xlib")
      set(CAIRO_CROSS_TARGET_FLAG "")
    elseif(${BUILD_TARGET} STREQUAL "w64")
      set(CAIRO_XLIB_FLAG "--disable-xlib")
      set(CAIRO_CROSS_TARGET_FLAG "--enable-win32")
    endif()
    ExternalProject_Add(cairo
      URL "http://www.cairographics.org/releases/cairo-${CAIRO_VERSION}.tar.xz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/cairo"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/cairo/src/cairo/configure
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-docs
      --disable-gl
      --disable-xcb
      --without-x
      --disable-ps
      ${CAIRO_CROSS_TARGET_FLAGS}
      DEPENDS libpng freetype pixman fontconfig
      )
else()
    add_custom_target(cairo "")
endif()

find_library(PANGO pango-1.0 PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT PANGO)
    ExternalProject_Add(pango
      URL "https://gitlab.gnome.org/GNOME/pango/-/archive/${PANGO_VERSION}/pango-${PANGO_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/pango"
      CONFIGURE_COMMAND meson ${CMAKE_CURRENT_BINARY_DIR}/pango/buildir ${MESON_CROSS_FILE}
      ${MESON_VARS}
      -Dintrospection=disabled
      BUILD_COMMAND ninja -C ${CMAKE_CURRENT_BINARY_DIR}/pango/buildir
      INSTALL_COMMAND ninja -C ${CMAKE_CURRENT_BINARY_DIR}/pango/buildir install
      BUILD_IN_SOURCE 1
      DEPENDS cairo freetype harfbuzz fribidi
      )
else()
    add_custom_target(pango "")
endif()

find_library(GIFLIB gif PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if (NOT GIFLIB)
    # giflib hasn't a standard build system, don't append CONFIGURE_VARS
    ExternalProject_Add(giflib
      URL "https://downloads.sourceforge.net/project/giflib/giflib-${GIF_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/giflib"
      PATCH_COMMAND patch -p1 < ${CMAKE_CURRENT_SOURCE_DIR}/patches/giflib-cmake.patch
      CMAKE_ARGS
      -DCMAKE_INSTALL_PREFIX=${EXT_INSTALL_DIR}
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_INSTALL_LIBDIR=lib
      -DBUILD_SHARED_LIBS=1
      -DENABLE_CCACHE=0
      BUILD_IN_SOURCE 1
      )
else()
    add_custom_target(giflib "")
endif()

find_library(LIBWEBP webp webpmux webpdemux PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT LIBWEBP)
    ExternalProject_Add(libwebp
      URL "http://downloads.webmproject.org/releases/webp/libwebp-${WEBP_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libwebp"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/libwebp/src/libwebp/configure
      ${CONFIGURE_VARS}
      --with-gifincludedir=${EXT_INSTALL_DIR}/include
      --with-giflibdir=${EXT_INSTALL_DIR}/lib
      --with-jpegincludedir=${EXT_INSTALL_DIR}/include
      --with-jpeglibdir=${EXT_INSTALL_DIR}/lib
      --with-pngincludedir=${EXT_INSTALL_DIR}/include
      --with-pnglibdir=${EXT_INSTALL_DIR}/lib
      --with-tiffincludedir=${EXT_INSTALL_DIR}/include
      --with-tifflibdir=${EXT_INSTALL_DIR}/lib
      --enable-shared
      --disable-static
      --disable-dependency-tracking
      --enable-libwebpmux
      --without-orc
      --disable-assert
      --enable-avx2
      --enable-sse4.1
      --enable-sse2
      --enable-threading
      DEPENDS libjpeg libpng giflib tiff
      )
else()
    add_custom_target(libwebp "")
endif()

if (WITH_LIBHEIF)
    list(APPEND LIBHEIF_FLAGS --with-heif)
    find_library(LIBAOM aom PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
    if(NOT LIBAOM)
        ExternalProject_Add(libaom
          URL "https://aomedia.googlesource.com/aom/+archive/refs/tags/v${AOM_VERSION}.tar.gz"
          PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libaom"
          CMAKE_ARGS
          -DCMAKE_INSTALL_PREFIX=${EXT_INSTALL_DIR}
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_LIBDIR=lib
          -DBUILD_SHARED_LIBS=1
          -DENABLE_CCACHE=0
          )
    else()
        add_custom_target(libaom "")
    endif()

    find_library(LIBHEIF heif PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
    if(NOT LIBHEIF)
        ExternalProject_Add(libheif
          URL "https://github.com/strukturag/libheif/releases/download/v${HEIF_VERSION}/libheif-${HEIF_VERSION}.tar.gz"
          PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libheif"
          CMAKE_ARGS
          -DCMAKE_INSTALL_PREFIX=${EXT_INSTALL_DIR}
          -DCMAKE_BUILD_TYPE=Release
          -DHAVE_AOM=yes
          -DHAVE_GO=no
          DEPENDS libaom
          BUILD_IN_SOURCE 1
          )
    else()
        add_custom_target(libheif "")
    endif()
else()
    list(APPEND LIBHEIF_FLAGS --without-heif)
    add_custom_target(libheif "")
endif()

find_library(LCMS2 lcms2 EXACT PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT LCMS2)
    ExternalProject_Add(lcms2
      URL "https://sourceforge.net/projects/lcms/files/lcms/${LCMS2_VERSION}/lcms2-${LCMS2_VERSION}.tar.gz/download"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/lcms2"
      CONFIGURE_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/lcms2/src/lcms2/configure
      ${CONFIGURE_VARS}
      --enable-shared
      --disable-static
      --disable-dependency-tracking
      )
else()
    add_custom_target(lcms2 "")
endif()

find_library(VIPS vips PATHS "${EXT_INSTALL_DIR}/lib" NO_DEFAULT_PATH)
if(NOT VIPS)
    # Cannot set CFLAGS with space separated flags
    ExternalProject_Add(libvips
      URL "https://github.com/libvips/libvips/archive/v${VIPS_VERSION}.tar.gz"
      PREFIX "${CMAKE_CURRENT_BINARY_DIR}/libvips"
      CONFIGURE_COMMAND ./autogen.sh
      PKG_CONFIG_PATH=${EXT_INSTALL_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH
      LDFLAGS=-L${EXT_INSTALL_DIR}/lib,-Wl,-rpath=${EXT_INSTALL_DIR}/lib
      CPPFLAGS=-I${EXT_INSTALL_DIR}/include
      --prefix=${EXT_INSTALL_DIR}
      ${CONFIGURE_HOST}
      --enable-shared
      --disable-static
      --disable-dependency-tracking
      --with-libwebp
      --with-lcms
      --with-imagequant
      --with-jpeg
      --with-jpeg-includes=${EXT_INSTALL_DIR}/include
      --with-jpeg-libraries=${EXT_INSTALL_DIR}/lib
      --with-tiff
      --with-tiff-includes=${EXT_INSTALL_DIR}/include
      --with-tiff-libraries=${EXT_INSTALL_DIR}/lib
      --without-magick
      --without-orc
      --without-gsf
      --without-rsvg
      ${LIBSPNG_FLAGS}
      ${LIBHEIF_FLAGS}
      DEPENDS libjpeg libpng libspng giflib libwebp libimagequant lcms2 libheif tiff pango
      BUILD_IN_SOURCE 1
      )
else()
    add_custom_target(libvips "")
endif()

set(VIPS_INCLUDE_DIRS CACHE INTERNAL "${EXT_INSTALL_DIR}/include")
set(VIPS_LIBRARY_DIRS CACHE INTERNAL "${EXT_INSTALL_DIR}/lib")
set(VIPS_LIBRARIES CACHE INTERNAL "-lvips")
